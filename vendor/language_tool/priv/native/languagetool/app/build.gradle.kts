import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath("gradle.plugin.com.github.johnrengelman:shadow:7.1.2")
    }
}

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.9.10"
    kotlin("plugin.serialization") version "1.9.10"
    //java

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

apply(plugin = "com.github.johnrengelman.shadow")

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
    implementation("com.google.guava:guava:32.1.1-jre")
    implementation("org.languagetool:language-all:6.3")
    implementation("com.googlecode.json-simple:json-simple:1.1.1")
    implementation("org.slf4j:slf4j-nop:2.0.7")

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.withType<ShadowJar> {
  archiveBaseName.set("language-tool")
  archiveClassifier.set("")
  archiveVersion.set("")
  mergeServiceFiles("META-INF/org/languagetool/language-module.properties")
}

tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = "com.mirego.accent.languagetool.AppKt"
    }
}

tasks.register<Jar>("customFatJar") {
    manifest {
        attributes["Main-Class"] = "com.baeldung.fatjar.Application"
    }
    //baseName = "all-in-one-jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.runtimeClasspath.get().map {
        if (it.isDirectory) {
            it
        } else {
            zipTree(it)
        }
    })
    with(tasks.jar.get())
}
application {
    // Define the main class for the application.
    mainClass.set("com.mirego.accent.languagetool.AppKt")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
